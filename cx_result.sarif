{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkmarx One","version":"1.0","informationUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","rules":[{"id":"Cxda14f253-4e52 (sca)","name":"Cxda14f2534e52","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The package `bluebird` is vulnerable to memory leak, when running the function longStackTraces() with the flag `--expose_gc`. This causes a significant increase in the memory usage, affecting the server's availability.","markdown":"The package `bluebird` is vulnerable to memory leak, when running the function longStackTraces() with the flag `--expose_gc`. This causes a significant increase in the memory usage, affecting the server's availability."},"fullDescription":{"text":"The package `bluebird` is vulnerable to memory leak, when running the function longStackTraces() with the flag `--expose_gc`. This causes a significant increase in the memory usage, affecting the server's availability."},"properties":{"security-severity":"6.5","name":"Cxda14f2534e52","id":"Cxda14f253-4e52 (sca)","description":"The package `bluebird` is vulnerable to memory leak, when running the function longStackTraces() with the flag `--expose_gc`. This causes a significant increase in the memory usage, affecting the server's availability.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2018-16487 (sca)","name":"Cve201816487","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"A prototype pollution vulnerability was found in lodash where the functions merge, mergeWith, and defaultsDeep can be tricked into adding or modifying properties of Object.prototype.","markdown":"A prototype pollution vulnerability was found in lodash where the functions merge, mergeWith, and defaultsDeep can be tricked into adding or modifying properties of Object.prototype."},"fullDescription":{"text":"A prototype pollution vulnerability was found in lodash where the functions merge, mergeWith, and defaultsDeep can be tricked into adding or modifying properties of Object.prototype."},"properties":{"security-severity":"8.5","name":"Cve201816487","id":"CVE-2018-16487 (sca)","description":"A prototype pollution vulnerability was found in lodash where the functions merge, mergeWith, and defaultsDeep can be tricked into adding or modifying properties of Object.prototype.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-32822 (sca)","name":"Cve202132822","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The npm hbs package is an Express view engine wrapper for Handlebars. Depending on usage, users of hbs may be vulnerable to a file disclosure vulnerability. There is currently no patch for this vulnerability. hbs mixes pure template data with engine configuration options through the Express render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications. For an example PoC see the referenced GHSL-2021-020.","markdown":"The npm hbs package is an Express view engine wrapper for Handlebars. Depending on usage, users of hbs may be vulnerable to a file disclosure vulnerability. There is currently no patch for this vulnerability. hbs mixes pure template data with engine configuration options through the Express render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications. For an example PoC see the referenced GHSL-2021-020."},"fullDescription":{"text":"The npm hbs package is an Express view engine wrapper for Handlebars. Depending on usage, users of hbs may be vulnerable to a file disclosure vulnerability. There is currently no patch for this vulnerability. hbs mixes pure template data with engine configuration options through the Express render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications. For an example PoC see the referenced GHSL-2021-020."},"properties":{"security-severity":"8.5","name":"Cve202132822","id":"CVE-2021-32822 (sca)","description":"The npm hbs package is an Express view engine wrapper for Handlebars. Depending on usage, users of hbs may be vulnerable to a file disclosure vulnerability. There is currently no patch for this vulnerability. hbs mixes pure template data with engine configuration options through the Express render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications. For an example PoC see the referenced GHSL-2021-020.","tags":["security","checkmarx","sca"]}},{"id":"Cx65603961-769c (sca)","name":"Cx65603961769c","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The package debug is vulnerable to memory leakage when instance is created inside a function. The function `debug` in the file `common.js` does not free up used memory unless there's a call to `destroy()` function. This affects the availability.","markdown":"The package debug is vulnerable to memory leakage when instance is created inside a function. The function `debug` in the file `common.js` does not free up used memory unless there's a call to `destroy()` function. This affects the availability."},"fullDescription":{"text":"The package debug is vulnerable to memory leakage when instance is created inside a function. The function `debug` in the file `common.js` does not free up used memory unless there's a call to `destroy()` function. This affects the availability."},"properties":{"security-severity":"8.5","name":"Cx65603961769c","id":"Cx65603961-769c (sca)","description":"The package debug is vulnerable to memory leakage when instance is created inside a function. The function `debug` in the file `common.js` does not free up used memory unless there's a call to `destroy()` function. This affects the availability.","tags":["security","checkmarx","sca"]}},{"id":"Cx7c42edbf-d5f1 (sca)","name":"Cx7c42edbfd5f1","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"base64url before 3.0.0 allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below.","markdown":"base64url before 3.0.0 allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below."},"fullDescription":{"text":"base64url before 3.0.0 allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below."},"properties":{"security-severity":"8.5","name":"Cx7c42edbfd5f1","id":"Cx7c42edbf-d5f1 (sca)","description":"base64url before 3.0.0 allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below.","tags":["security","checkmarx","sca"]}},{"id":"Cx5c009a1a-2054 (sca)","name":"Cx5c009a1a2054","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The `format` method in npm moment before version 2.15.2 is vulnerable to regular expression denial of service.","markdown":"The `format` method in npm moment before version 2.15.2 is vulnerable to regular expression denial of service."},"fullDescription":{"text":"The `format` method in npm moment before version 2.15.2 is vulnerable to regular expression denial of service."},"properties":{"security-severity":"8.5","name":"Cx5c009a1a2054","id":"Cx5c009a1a-2054 (sca)","description":"The `format` method in npm moment before version 2.15.2 is vulnerable to regular expression denial of service.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2016-4055 (sca)","name":"Cve20164055","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The duration function in the moment package before 2.11.2 for Node.js allows remote attackers to cause a denial of service (CPU consumption) via a long string, aka a \"regular expression Denial of Service (ReDoS).\"","markdown":"The duration function in the moment package before 2.11.2 for Node.js allows remote attackers to cause a denial of service (CPU consumption) via a long string, aka a \"regular expression Denial of Service (ReDoS).\""},"fullDescription":{"text":"The duration function in the moment package before 2.11.2 for Node.js allows remote attackers to cause a denial of service (CPU consumption) via a long string, aka a \"regular expression Denial of Service (ReDoS).\""},"properties":{"security-severity":"8.5","name":"Cve20164055","id":"CVE-2016-4055 (sca)","description":"The duration function in the moment package before 2.11.2 for Node.js allows remote attackers to cause a denial of service (CPU consumption) via a long string, aka a \"regular expression Denial of Service (ReDoS).\"","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-23566 (sca)","name":"Cve202123566","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The package nanoid before 3.1.31 are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated.","markdown":"The package nanoid before 3.1.31 are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated."},"fullDescription":{"text":"The package nanoid before 3.1.31 are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated."},"properties":{"security-severity":"8.5","name":"Cve202123566","id":"CVE-2021-23566 (sca)","description":"The package nanoid before 3.1.31 are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2018-3721 (sca)","name":"Cve20183721","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"lodash node module suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of \"Object\" via __proto__, causing the addition or modification of an existing property that will exist on all objects.","markdown":"lodash node module suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of \"Object\" via __proto__, causing the addition or modification of an existing property that will exist on all objects."},"fullDescription":{"text":"lodash node module suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of \"Object\" via __proto__, causing the addition or modification of an existing property that will exist on all objects."},"properties":{"security-severity":"8.5","name":"Cve20183721","id":"CVE-2018-3721 (sca)","description":"lodash node module suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of \"Object\" via __proto__, causing the addition or modification of an existing property that will exist on all objects.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-0122 (sca)","name":"Cve20220122","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"forge prior to 1.0.0 is vulnerable to URL Redirection to Untrusted Site.","markdown":"forge prior to 1.0.0 is vulnerable to URL Redirection to Untrusted Site."},"fullDescription":{"text":"forge prior to 1.0.0 is vulnerable to URL Redirection to Untrusted Site."},"properties":{"security-severity":"8.5","name":"Cve20220122","id":"CVE-2022-0122 (sca)","description":"forge prior to 1.0.0 is vulnerable to URL Redirection to Untrusted Site.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2019-1010266 (sca)","name":"Cve20191010266","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"lodash prior to 4.17.11 is affected by: CWE-400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.17.11.","markdown":"lodash prior to 4.17.11 is affected by: CWE-400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.17.11."},"fullDescription":{"text":"lodash prior to 4.17.11 is affected by: CWE-400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.17.11."},"properties":{"security-severity":"8.5","name":"Cve20191010266","id":"CVE-2019-1010266 (sca)","description":"lodash prior to 4.17.11 is affected by: CWE-400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.17.11.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-24773 (sca)","name":"Cve202224773","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.","markdown":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"fullDescription":{"text":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"properties":{"security-severity":"8.5","name":"Cve202224773","id":"CVE-2022-24773 (sca)","description":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-23771 (sca)","name":"Cve202123771","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Version 1.3.3 of notevil and all versions of argencoders-notevil are vulnerable to Sandbox Escape leading to Prototype pollution. The packages fail to restrict access to the main context, allowing an attacker to add or modify an object's prototype.","markdown":"Version 1.3.3 of notevil and all versions of argencoders-notevil are vulnerable to Sandbox Escape leading to Prototype pollution. The packages fail to restrict access to the main context, allowing an attacker to add or modify an object's prototype."},"fullDescription":{"text":"Version 1.3.3 of notevil and all versions of argencoders-notevil are vulnerable to Sandbox Escape leading to Prototype pollution. The packages fail to restrict access to the main context, allowing an attacker to add or modify an object's prototype."},"properties":{"security-severity":"8.5","name":"Cve202123771","id":"CVE-2021-23771 (sca)","description":"Version 1.3.3 of notevil and all versions of argencoders-notevil are vulnerable to Sandbox Escape leading to Prototype pollution. The packages fail to restrict access to the main context, allowing an attacker to add or modify an object's prototype.","tags":["security","checkmarx","sca"]}},{"id":"Cx7d063416-6f02 (sca)","name":"Cx7d0634166f02","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"A vulnerability was discovered in sanitize-html up to 1.4.2. Affected versions do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript.","markdown":"A vulnerability was discovered in sanitize-html up to 1.4.2. Affected versions do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript."},"fullDescription":{"text":"A vulnerability was discovered in sanitize-html up to 1.4.2. Affected versions do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript."},"properties":{"security-severity":"8.5","name":"Cx7d0634166f02","id":"Cx7d063416-6f02 (sca)","description":"A vulnerability was discovered in sanitize-html up to 1.4.2. Affected versions do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript.","tags":["security","checkmarx","sca"]}},{"id":"Cx24228ad1-81fd (sca)","name":"Cx24228ad181fd","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The package sanitize-html is vulnerable to a whitelist bypass due to a faulty condition in the sanitzeHtml() function. When a string is supplied as an input to `allowedTags`, instead of a strings array, the application behaves differently, allowing an attacker to use tags which doesn't fall under allowedTags. This allows an attacker to carry out further attacks such as XSS.","markdown":"The package sanitize-html is vulnerable to a whitelist bypass due to a faulty condition in the sanitzeHtml() function. When a string is supplied as an input to `allowedTags`, instead of a strings array, the application behaves differently, allowing an attacker to use tags which doesn't fall under allowedTags. This allows an attacker to carry out further attacks such as XSS."},"fullDescription":{"text":"The package sanitize-html is vulnerable to a whitelist bypass due to a faulty condition in the sanitzeHtml() function. When a string is supplied as an input to `allowedTags`, instead of a strings array, the application behaves differently, allowing an attacker to use tags which doesn't fall under allowedTags. This allows an attacker to carry out further attacks such as XSS."},"properties":{"security-severity":"8.5","name":"Cx24228ad181fd","id":"Cx24228ad1-81fd (sca)","description":"The package sanitize-html is vulnerable to a whitelist bypass due to a faulty condition in the sanitzeHtml() function. When a string is supplied as an input to `allowedTags`, instead of a strings array, the application behaves differently, allowing an attacker to use tags which doesn't fall under allowedTags. This allows an attacker to carry out further attacks such as XSS.","tags":["security","checkmarx","sca"]}},{"id":"Cx3fe16d6b-d031 (sca)","name":"Cx3fe16d6bd031","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The package sanitize-html is vulnerable to \"Cross-site Scripting\", as the function `sanitizeHtml()` in the file `index.js` fails to sanitize which were turned into inline text. An attacker can abuse applications using 'custom tag transformation' by injecting malicious javascript into the attribute field.","markdown":"The package sanitize-html is vulnerable to \"Cross-site Scripting\", as the function `sanitizeHtml()` in the file `index.js` fails to sanitize which were turned into inline text. An attacker can abuse applications using 'custom tag transformation' by injecting malicious javascript into the attribute field."},"fullDescription":{"text":"The package sanitize-html is vulnerable to \"Cross-site Scripting\", as the function `sanitizeHtml()` in the file `index.js` fails to sanitize which were turned into inline text. An attacker can abuse applications using 'custom tag transformation' by injecting malicious javascript into the attribute field."},"properties":{"security-severity":"8.5","name":"Cx3fe16d6bd031","id":"Cx3fe16d6b-d031 (sca)","description":"The package sanitize-html is vulnerable to \"Cross-site Scripting\", as the function `sanitizeHtml()` in the file `index.js` fails to sanitize which were turned into inline text. An attacker can abuse applications using 'custom tag transformation' by injecting malicious javascript into the attribute field.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2016-1000237 (sca)","name":"Cve20161000237","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"sanitize-html before 1.4.3 has XSS.","markdown":"sanitize-html before 1.4.3 has XSS."},"fullDescription":{"text":"sanitize-html before 1.4.3 has XSS."},"properties":{"security-severity":"8.5","name":"Cve20161000237","id":"CVE-2016-1000237 (sca)","description":"sanitize-html before 1.4.3 has XSS.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2017-16016 (sca)","name":"Cve201716016","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Sanitize-html is a library for scrubbing html input of malicious values. Versions 1.11.3 and below are vulnerable to cross site scripting (XSS) in certain scenarios: If allowed at least one nonTextTags, the result is a potential XSS vulnerability.","markdown":"Sanitize-html is a library for scrubbing html input of malicious values. Versions 1.11.3 and below are vulnerable to cross site scripting (XSS) in certain scenarios: If allowed at least one nonTextTags, the result is a potential XSS vulnerability."},"fullDescription":{"text":"Sanitize-html is a library for scrubbing html input of malicious values. Versions 1.11.3 and below are vulnerable to cross site scripting (XSS) in certain scenarios: If allowed at least one nonTextTags, the result is a potential XSS vulnerability."},"properties":{"security-severity":"8.5","name":"Cve201716016","id":"CVE-2017-16016 (sca)","description":"Sanitize-html is a library for scrubbing html input of malicious values. Versions 1.11.3 and below are vulnerable to cross site scripting (XSS) in certain scenarios: If allowed at least one nonTextTags, the result is a potential XSS vulnerability.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-26539 (sca)","name":"Cve202126539","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Apostrophe Technologies sanitize-html before 2.3.1 does not properly handle internationalized domain name (IDN) which could allow an attacker to bypass hostname whitelist validation set by the \"allowedIframeHostnames\" option.","markdown":"Apostrophe Technologies sanitize-html before 2.3.1 does not properly handle internationalized domain name (IDN) which could allow an attacker to bypass hostname whitelist validation set by the \"allowedIframeHostnames\" option."},"fullDescription":{"text":"Apostrophe Technologies sanitize-html before 2.3.1 does not properly handle internationalized domain name (IDN) which could allow an attacker to bypass hostname whitelist validation set by the \"allowedIframeHostnames\" option."},"properties":{"security-severity":"8.5","name":"Cve202126539","id":"CVE-2021-26539 (sca)","description":"Apostrophe Technologies sanitize-html before 2.3.1 does not properly handle internationalized domain name (IDN) which could allow an attacker to bypass hostname whitelist validation set by the \"allowedIframeHostnames\" option.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-26540 (sca)","name":"Cve202126540","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Apostrophe Technologies sanitize-html before 2.3.2 does not properly validate the hostnames set by the \"allowedIframeHostnames\" option when the \"allowIframeRelativeUrls\" is set to true, which allows attackers to bypass hostname whitelist for iframe element, related using an src value that starts with \"/\\\\example.com\".","markdown":"Apostrophe Technologies sanitize-html before 2.3.2 does not properly validate the hostnames set by the \"allowedIframeHostnames\" option when the \"allowIframeRelativeUrls\" is set to true, which allows attackers to bypass hostname whitelist for iframe element, related using an src value that starts with \"/\\\\example.com\"."},"fullDescription":{"text":"Apostrophe Technologies sanitize-html before 2.3.2 does not properly validate the hostnames set by the \"allowedIframeHostnames\" option when the \"allowIframeRelativeUrls\" is set to true, which allows attackers to bypass hostname whitelist for iframe element, related using an src value that starts with \"/\\\\example.com\"."},"properties":{"security-severity":"8.5","name":"Cve202126540","id":"CVE-2021-26540 (sca)","description":"Apostrophe Technologies sanitize-html before 2.3.2 does not properly validate the hostnames set by the \"allowedIframeHostnames\" option when the \"allowIframeRelativeUrls\" is set to true, which allows attackers to bypass hostname whitelist for iframe element, related using an src value that starts with \"/\\\\example.com\".","tags":["security","checkmarx","sca"]}},{"id":"CVE-2020-28500 (sca)","name":"Cve202028500","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Lodash before 4.17.21 is vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions.","markdown":"Lodash before 4.17.21 is vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions."},"fullDescription":{"text":"Lodash before 4.17.21 is vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions."},"properties":{"security-severity":"8.5","name":"Cve202028500","id":"CVE-2020-28500 (sca)","description":"Lodash before 4.17.21 is vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2020-7639 (sca)","name":"Cve20207639","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"eivindfjeldstad-dot below 1.0.3 is vulnerable to Prototype Pollution.The function 'set' could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload.","markdown":"eivindfjeldstad-dot below 1.0.3 is vulnerable to Prototype Pollution.The function 'set' could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload."},"fullDescription":{"text":"eivindfjeldstad-dot below 1.0.3 is vulnerable to Prototype Pollution.The function 'set' could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload."},"properties":{"security-severity":"8.5","name":"Cve20207639","id":"CVE-2020-7639 (sca)","description":"eivindfjeldstad-dot below 1.0.3 is vulnerable to Prototype Pollution.The function 'set' could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-41940 (sca)","name":"Cve202241940","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the engine.io package, including those who uses depending packages like socket.io. There is no known workaround except upgrading to a safe version. This issue affects versions prior to 3.6.1, and 4.0.x prior to 6.2.1. ","markdown":"Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the engine.io package, including those who uses depending packages like socket.io. There is no known workaround except upgrading to a safe version. This issue affects versions prior to 3.6.1, and 4.0.x prior to 6.2.1. "},"fullDescription":{"text":"Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the engine.io package, including those who uses depending packages like socket.io. There is no known workaround except upgrading to a safe version. This issue affects versions prior to 3.6.1, and 4.0.x prior to 6.2.1. "},"properties":{"security-severity":"8.5","name":"Cve202241940","id":"CVE-2022-41940 (sca)","description":"Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the engine.io package, including those who uses depending packages like socket.io. There is no known workaround except upgrading to a safe version. This issue affects versions prior to 3.6.1, and 4.0.x prior to 6.2.1. ","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-4231 (sca)","name":"Cve20214231","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"A vulnerability was found in Angular prior to 9.1.13, 10.x prior to 10.2.4, 11.0.x prior to 11.0.5, 11.1.x prior to 11.1.0-next3. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. It is recommended to upgrade the affected component.","markdown":"A vulnerability was found in Angular prior to 9.1.13, 10.x prior to 10.2.4, 11.0.x prior to 11.0.5, 11.1.x prior to 11.1.0-next3. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. It is recommended to upgrade the affected component."},"fullDescription":{"text":"A vulnerability was found in Angular prior to 9.1.13, 10.x prior to 10.2.4, 11.0.x prior to 11.0.5, 11.1.x prior to 11.1.0-next3. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. It is recommended to upgrade the affected component."},"properties":{"security-severity":"8.5","name":"Cve20214231","id":"CVE-2021-4231 (sca)","description":"A vulnerability was found in Angular prior to 9.1.13, 10.x prior to 10.2.4, 11.0.x prior to 11.0.5, 11.1.x prior to 11.1.0-next3. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. It is recommended to upgrade the affected component.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-33987 (sca)","name":"Cve202233987","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The got package before 11.8.5, and 12.x before 12.1.0 for Node.js allows a redirect to a UNIX socket.","markdown":"The got package before 11.8.5, and 12.x before 12.1.0 for Node.js allows a redirect to a UNIX socket."},"fullDescription":{"text":"The got package before 11.8.5, and 12.x before 12.1.0 for Node.js allows a redirect to a UNIX socket."},"properties":{"security-severity":"8.5","name":"Cve202233987","id":"CVE-2022-33987 (sca)","description":"The got package before 11.8.5, and 12.x before 12.1.0 for Node.js allows a redirect to a UNIX socket.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-23540 (sca)","name":"Cve202223540","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Versions prior to 9.0.0 of `jsonwebtoken` library, lack of algorithm definition in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification. Users are affected if you do not specify algorithms in the `jwt.verify()` function. This issue has been fixed, which removes the default support for the none algorithm in the `jwt.verify()` method and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.","markdown":"Versions prior to 9.0.0 of `jsonwebtoken` library, lack of algorithm definition in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification. Users are affected if you do not specify algorithms in the `jwt.verify()` function. This issue has been fixed, which removes the default support for the none algorithm in the `jwt.verify()` method and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options."},"fullDescription":{"text":"Versions prior to 9.0.0 of `jsonwebtoken` library, lack of algorithm definition in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification. Users are affected if you do not specify algorithms in the `jwt.verify()` function. This issue has been fixed, which removes the default support for the none algorithm in the `jwt.verify()` method and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options."},"properties":{"security-severity":"9.5","name":"Cve202223540","id":"CVE-2022-23540 (sca)","description":"Versions prior to 9.0.0 of `jsonwebtoken` library, lack of algorithm definition in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification. Users are affected if you do not specify algorithms in the `jwt.verify()` function. This issue has been fixed, which removes the default support for the none algorithm in the `jwt.verify()` method and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2015-9235 (sca)","name":"Cve20159235","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"In jsonwebtoken node module before 4.2.2 it is possible for an attacker to bypass verification when a token digitally signed with an asymmetric key (RS/ES family) of algorithms but instead the attacker send a token digitally signed with a symmetric algorithm (HS* family).","markdown":"In jsonwebtoken node module before 4.2.2 it is possible for an attacker to bypass verification when a token digitally signed with an asymmetric key (RS/ES family) of algorithms but instead the attacker send a token digitally signed with a symmetric algorithm (HS* family)."},"fullDescription":{"text":"In jsonwebtoken node module before 4.2.2 it is possible for an attacker to bypass verification when a token digitally signed with an asymmetric key (RS/ES family) of algorithms but instead the attacker send a token digitally signed with a symmetric algorithm (HS* family)."},"properties":{"security-severity":"9.5","name":"Cve20159235","id":"CVE-2015-9235 (sca)","description":"In jsonwebtoken node module before 4.2.2 it is possible for an attacker to bypass verification when a token digitally signed with an asymmetric key (RS/ES family) of algorithms but instead the attacker send a token digitally signed with a symmetric algorithm (HS* family).","tags":["security","checkmarx","sca"]}},{"id":"Cxdd801a12-8c33 (sca)","name":"Cxdd801a128c33","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"An improper validation of algorithm in JWT before 0.4.1 was found in `jsonwebtoken`. The function verify() allows an attacker to create their own \"signed\" tokens, by setting the algorithm value as `none`.","markdown":"An improper validation of algorithm in JWT before 0.4.1 was found in `jsonwebtoken`. The function verify() allows an attacker to create their own \"signed\" tokens, by setting the algorithm value as `none`."},"fullDescription":{"text":"An improper validation of algorithm in JWT before 0.4.1 was found in `jsonwebtoken`. The function verify() allows an attacker to create their own \"signed\" tokens, by setting the algorithm value as `none`."},"properties":{"security-severity":"9.5","name":"Cxdd801a128c33","id":"Cxdd801a12-8c33 (sca)","description":"An improper validation of algorithm in JWT before 0.4.1 was found in `jsonwebtoken`. The function verify() allows an attacker to create their own \"signed\" tokens, by setting the algorithm value as `none`.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-23541 (sca)","name":"Cve202223541","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"jsonwebtoken is an implementation of JSON Web Tokens. Versions prior to 9.0.0 of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function referring to the `secretOrPublicKey` argument from the readme link will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification, other than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. If your application is supporting usage of both symmetric key and asymmetric key in \"jwt.verify()\" implementation with the same key retrieval function. ","markdown":"jsonwebtoken is an implementation of JSON Web Tokens. Versions prior to 9.0.0 of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function referring to the `secretOrPublicKey` argument from the readme link will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification, other than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. If your application is supporting usage of both symmetric key and asymmetric key in \"jwt.verify()\" implementation with the same key retrieval function. "},"fullDescription":{"text":"jsonwebtoken is an implementation of JSON Web Tokens. Versions prior to 9.0.0 of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function referring to the `secretOrPublicKey` argument from the readme link will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification, other than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. If your application is supporting usage of both symmetric key and asymmetric key in \"jwt.verify()\" implementation with the same key retrieval function. "},"properties":{"security-severity":"9.5","name":"Cve202223541","id":"CVE-2022-23541 (sca)","description":"jsonwebtoken is an implementation of JSON Web Tokens. Versions prior to 9.0.0 of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function referring to the `secretOrPublicKey` argument from the readme link will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification, other than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. If your application is supporting usage of both symmetric key and asymmetric key in \"jwt.verify()\" implementation with the same key retrieval function. ","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-23539 (sca)","name":"Cve202223539","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Versions prior to 9.0.0 `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. You are affected if you are using an algorithm and a key type other than a combination listed in the Security Advisory as unaffected. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, if you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option to `true` in the `sign()` and/or `verify()` functions.","markdown":"Versions prior to 9.0.0 `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. You are affected if you are using an algorithm and a key type other than a combination listed in the Security Advisory as unaffected. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, if you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option to `true` in the `sign()` and/or `verify()` functions."},"fullDescription":{"text":"Versions prior to 9.0.0 `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. You are affected if you are using an algorithm and a key type other than a combination listed in the Security Advisory as unaffected. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, if you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option to `true` in the `sign()` and/or `verify()` functions."},"properties":{"security-severity":"9.5","name":"Cve202223539","id":"CVE-2022-23539 (sca)","description":"Versions prior to 9.0.0 `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. You are affected if you are using an algorithm and a key type other than a combination listed in the Security Advisory as unaffected. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, if you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option to `true` in the `sign()` and/or `verify()` functions.","tags":["security","checkmarx","sca"]}},{"id":"Cxffc79d87-98d9 (sca)","name":"Cxffc79d8798d9","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"An authentication bypass vulnerability was discovered in jws up to version 2.0.0. This vulnerability allows an attacker to generate signatures with arbitrary contents that would be accepted by 'jws.verify'.","markdown":"An authentication bypass vulnerability was discovered in jws up to version 2.0.0. This vulnerability allows an attacker to generate signatures with arbitrary contents that would be accepted by 'jws.verify'."},"fullDescription":{"text":"An authentication bypass vulnerability was discovered in jws up to version 2.0.0. This vulnerability allows an attacker to generate signatures with arbitrary contents that would be accepted by 'jws.verify'."},"properties":{"security-severity":"9.5","name":"Cxffc79d8798d9","id":"Cxffc79d87-98d9 (sca)","description":"An authentication bypass vulnerability was discovered in jws up to version 2.0.0. This vulnerability allows an attacker to generate signatures with arbitrary contents that would be accepted by 'jws.verify'.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2016-1000223 (sca)","name":"Cve20161000223","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"jws \tbefore 3.0.0 allows users to select what algorithm the server will use to verify a provided JWT. A malicious actor can use this behaviour to arbitrarily modify the contents of a JWT while still passing verification. For the common use case of the JWT as a bearer token, the end result is a complete authentication bypass with minimal effort.","markdown":"jws \tbefore 3.0.0 allows users to select what algorithm the server will use to verify a provided JWT. A malicious actor can use this behaviour to arbitrarily modify the contents of a JWT while still passing verification. For the common use case of the JWT as a bearer token, the end result is a complete authentication bypass with minimal effort."},"fullDescription":{"text":"jws \tbefore 3.0.0 allows users to select what algorithm the server will use to verify a provided JWT. A malicious actor can use this behaviour to arbitrarily modify the contents of a JWT while still passing verification. For the common use case of the JWT as a bearer token, the end result is a complete authentication bypass with minimal effort."},"properties":{"security-severity":"9.5","name":"Cve20161000223","id":"CVE-2016-1000223 (sca)","description":"jws \tbefore 3.0.0 allows users to select what algorithm the server will use to verify a provided JWT. A malicious actor can use this behaviour to arbitrarily modify the contents of a JWT while still passing verification. For the common use case of the JWT as a bearer token, the end result is a complete authentication bypass with minimal effort.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2019-10744 (sca)","name":"Cve201910744","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"A Prototype Pollution vulnerability was discovered in lodash before 4.17.12, in lodash.defaultsdeep before 4.6.1 and in @sailshq/lodash before 3.10.4. The function defaultsDeep allows a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects.","markdown":"A Prototype Pollution vulnerability was discovered in lodash before 4.17.12, in lodash.defaultsdeep before 4.6.1 and in @sailshq/lodash before 3.10.4. The function defaultsDeep allows a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects."},"fullDescription":{"text":"A Prototype Pollution vulnerability was discovered in lodash before 4.17.12, in lodash.defaultsdeep before 4.6.1 and in @sailshq/lodash before 3.10.4. The function defaultsDeep allows a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects."},"properties":{"security-severity":"9.5","name":"Cve201910744","id":"CVE-2019-10744 (sca)","description":"A Prototype Pollution vulnerability was discovered in lodash before 4.17.12, in lodash.defaultsdeep before 4.6.1 and in @sailshq/lodash before 3.10.4. The function defaultsDeep allows a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2020-8203 (sca)","name":"Cve20208203","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Prototype pollution attack when using _.zipObjectDeep in lodash before 4.17.20.","markdown":"Prototype pollution attack when using _.zipObjectDeep in lodash before 4.17.20."},"fullDescription":{"text":"Prototype pollution attack when using _.zipObjectDeep in lodash before 4.17.20."},"properties":{"security-severity":"9.5","name":"Cve20208203","id":"CVE-2020-8203 (sca)","description":"Prototype pollution attack when using _.zipObjectDeep in lodash before 4.17.20.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-23337 (sca)","name":"Cve202123337","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"lodash and lodash-es prior to 4.17.21 are vulnerable to Command Injection via the \"template\" function. ","markdown":"lodash and lodash-es prior to 4.17.21 are vulnerable to Command Injection via the \"template\" function. "},"fullDescription":{"text":"lodash and lodash-es prior to 4.17.21 are vulnerable to Command Injection via the \"template\" function. "},"properties":{"security-severity":"9.5","name":"Cve202123337","id":"CVE-2021-23337 (sca)","description":"lodash and lodash-es prior to 4.17.21 are vulnerable to Command Injection via the \"template\" function. ","tags":["security","checkmarx","sca"]}},{"id":"Cx0b414307-5d4b (sca)","name":"Cx0b4143075d4b","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Prototype Pollution vulnerability in lodash before 4.17.19.","markdown":"Prototype Pollution vulnerability in lodash before 4.17.19."},"fullDescription":{"text":"Prototype Pollution vulnerability in lodash before 4.17.19."},"properties":{"security-severity":"9.5","name":"Cx0b4143075d4b","id":"Cx0b414307-5d4b (sca)","description":"Prototype Pollution vulnerability in lodash before 4.17.19.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-3517 (sca)","name":"Cve20223517","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"A vulnerability was found in the minimatch package versions prior to 3.0.5. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the \"braceExpand\" function with specific arguments, resulting in a Denial of Service.","markdown":"A vulnerability was found in the minimatch package versions prior to 3.0.5. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the \"braceExpand\" function with specific arguments, resulting in a Denial of Service."},"fullDescription":{"text":"A vulnerability was found in the minimatch package versions prior to 3.0.5. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the \"braceExpand\" function with specific arguments, resulting in a Denial of Service."},"properties":{"security-severity":"9.5","name":"Cve20223517","id":"CVE-2022-3517 (sca)","description":"A vulnerability was found in the minimatch package versions prior to 3.0.5. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the \"braceExpand\" function with specific arguments, resulting in a Denial of Service.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-44906 (sca)","name":"Cve202144906","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Minimist through 1.2.5 is vulnerable to Prototype Pollution via file \"index.js\", function \"setKey()\" (lines 69-95).","markdown":"Minimist through 1.2.5 is vulnerable to Prototype Pollution via file \"index.js\", function \"setKey()\" (lines 69-95)."},"fullDescription":{"text":"Minimist through 1.2.5 is vulnerable to Prototype Pollution via file \"index.js\", function \"setKey()\" (lines 69-95)."},"properties":{"security-severity":"9.5","name":"Cve202144906","id":"CVE-2021-44906 (sca)","description":"Minimist through 1.2.5 is vulnerable to Prototype Pollution via file \"index.js\", function \"setKey()\" (lines 69-95).","tags":["security","checkmarx","sca"]}},{"id":"Cxb3ca64d2-9cd1 (sca)","name":"Cxb3ca64d29cd1","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"A Regular Expression Denial of Service (ReDoS) in mocha can make the server unavailable when a specially crafted input is provided. This was marked as \"Disputed\" because the issue was closed without a fix, and we couldn't confirm its exploitability.","markdown":"A Regular Expression Denial of Service (ReDoS) in mocha can make the server unavailable when a specially crafted input is provided. This was marked as \"Disputed\" because the issue was closed without a fix, and we couldn't confirm its exploitability."},"fullDescription":{"text":"A Regular Expression Denial of Service (ReDoS) in mocha can make the server unavailable when a specially crafted input is provided. This was marked as \"Disputed\" because the issue was closed without a fix, and we couldn't confirm its exploitability."},"properties":{"security-severity":"9.5","name":"Cxb3ca64d29cd1","id":"Cxb3ca64d2-9cd1 (sca)","description":"A Regular Expression Denial of Service (ReDoS) in mocha can make the server unavailable when a specially crafted input is provided. This was marked as \"Disputed\" because the issue was closed without a fix, and we couldn't confirm its exploitability.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2017-18214 (sca)","name":"Cve201718214","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The moment module before 2.19.3 for Node.js is prone to a regular expression denial of service via a crafted date string, a different vulnerability than CVE-2016-4055.","markdown":"The moment module before 2.19.3 for Node.js is prone to a regular expression denial of service via a crafted date string, a different vulnerability than CVE-2016-4055."},"fullDescription":{"text":"The moment module before 2.19.3 for Node.js is prone to a regular expression denial of service via a crafted date string, a different vulnerability than CVE-2016-4055."},"properties":{"security-severity":"9.5","name":"Cve201718214","id":"CVE-2017-18214 (sca)","description":"The moment module before 2.19.3 for Node.js is prone to a regular expression denial of service via a crafted date string, a different vulnerability than CVE-2016-4055.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-24785 (sca)","name":"Cve202224785","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Moment.js is a JavaScript date library for parsing, validating, manipulating, and formatting dates. A path traversal vulnerability impacts npm (server) users of Moment.js between versions 1.0.1 and 2.29.1, especially if a user-provided locale string is directly used to switch moment locale. This problem is patched in 2.29.2, and the patch can be applied to all affected versions. As a workaround, sanitize the user-provided locale name before passing it to Moment.js.","markdown":"Moment.js is a JavaScript date library for parsing, validating, manipulating, and formatting dates. A path traversal vulnerability impacts npm (server) users of Moment.js between versions 1.0.1 and 2.29.1, especially if a user-provided locale string is directly used to switch moment locale. This problem is patched in 2.29.2, and the patch can be applied to all affected versions. As a workaround, sanitize the user-provided locale name before passing it to Moment.js."},"fullDescription":{"text":"Moment.js is a JavaScript date library for parsing, validating, manipulating, and formatting dates. A path traversal vulnerability impacts npm (server) users of Moment.js between versions 1.0.1 and 2.29.1, especially if a user-provided locale string is directly used to switch moment locale. This problem is patched in 2.29.2, and the patch can be applied to all affected versions. As a workaround, sanitize the user-provided locale name before passing it to Moment.js."},"properties":{"security-severity":"9.5","name":"Cve202224785","id":"CVE-2022-24785 (sca)","description":"Moment.js is a JavaScript date library for parsing, validating, manipulating, and formatting dates. A path traversal vulnerability impacts npm (server) users of Moment.js between versions 1.0.1 and 2.29.1, especially if a user-provided locale string is directly used to switch moment locale. This problem is patched in 2.29.2, and the patch can be applied to all affected versions. As a workaround, sanitize the user-provided locale name before passing it to Moment.js.","tags":["security","checkmarx","sca"]}},{"id":"Cx347a3da7-ba99 (sca)","name":"Cx347a3da7ba99","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Prototype Pollution in node-forge debug API before 1.0.0 The forge.debug API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised. It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.","markdown":"Prototype Pollution in node-forge debug API before 1.0.0 The forge.debug API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised. It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way."},"fullDescription":{"text":"Prototype Pollution in node-forge debug API before 1.0.0 The forge.debug API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised. It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way."},"properties":{"security-severity":"9.5","name":"Cx347a3da7ba99","id":"Cx347a3da7-ba99 (sca)","description":"Prototype Pollution in node-forge debug API before 1.0.0 The forge.debug API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised. It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-24771 (sca)","name":"Cve202224771","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.","markdown":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"fullDescription":{"text":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"properties":{"security-severity":"9.5","name":"Cve202224771","id":"CVE-2022-24771 (sca)","description":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-24772 (sca)","name":"Cve202224772","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.","markdown":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"fullDescription":{"text":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds."},"properties":{"security-severity":"9.5","name":"Cve202224772","id":"CVE-2022-24772 (sca)","description":"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-25887 (sca)","name":"Cve202225887","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The package sanitize-html before 2.7.1 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal.","markdown":"The package sanitize-html before 2.7.1 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal."},"fullDescription":{"text":"The package sanitize-html before 2.7.1 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal."},"properties":{"security-severity":"9.5","name":"Cve202225887","id":"CVE-2022-25887 (sca)","description":"The package sanitize-html before 2.7.1 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-25858 (sca)","name":"Cve202225858","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The package terser before 4.8.1, and 5.0.x before 5.14.2 is vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.","markdown":"The package terser before 4.8.1, and 5.0.x before 5.14.2 is vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions."},"fullDescription":{"text":"The package terser before 4.8.1, and 5.0.x before 5.14.2 is vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions."},"properties":{"security-severity":"9.5","name":"Cve202225858","id":"CVE-2022-25858 (sca)","description":"The package terser before 4.8.1, and 5.0.x before 5.14.2 is vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.","tags":["security","checkmarx","sca"]}},{"id":"Cxf6e7f2c1-dc59 (sca)","name":"Cxf6e7f2c1dc59","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The package yauzl is vulnerable to arbitrary file write implemented through improper validation of symlinks.\n The function validateFileName in the file `index.js` doesn't validate malicious symlink files when checking for path traversal attacks. This affects the integrity \u0026 availability.","markdown":"The package yauzl is vulnerable to arbitrary file write implemented through improper validation of symlinks.\n The function validateFileName in the file `index.js` doesn't validate malicious symlink files when checking for path traversal attacks. This affects the integrity \u0026 availability."},"fullDescription":{"text":"The package yauzl is vulnerable to arbitrary file write implemented through improper validation of symlinks.\n The function validateFileName in the file `index.js` doesn't validate malicious symlink files when checking for path traversal attacks. This affects the integrity \u0026 availability."},"properties":{"security-severity":"9.5","name":"Cxf6e7f2c1dc59","id":"Cxf6e7f2c1-dc59 (sca)","description":"The package yauzl is vulnerable to arbitrary file write implemented through improper validation of symlinks.\n The function validateFileName in the file `index.js` doesn't validate malicious symlink files when checking for path traversal attacks. This affects the integrity \u0026 availability.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2021-3807 (sca)","name":"Cve20213807","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"ansi-regex prior to 5.0.1 and 6.0.x prior to 6.0.1 is vulnerable to Inefficient Regular Expression Complexity","markdown":"ansi-regex prior to 5.0.1 and 6.0.x prior to 6.0.1 is vulnerable to Inefficient Regular Expression Complexity"},"fullDescription":{"text":"ansi-regex prior to 5.0.1 and 6.0.x prior to 6.0.1 is vulnerable to Inefficient Regular Expression Complexity"},"properties":{"security-severity":"9.5","name":"Cve20213807","id":"CVE-2021-3807 (sca)","description":"ansi-regex prior to 5.0.1 and 6.0.x prior to 6.0.1 is vulnerable to Inefficient Regular Expression Complexity","tags":["security","checkmarx","sca"]}},{"id":"Cxc7705965-e0f0 (sca)","name":"Cxc7705965e0f0","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"The @babel/core package versions prior to 7.18.6 were discovered to contain a memory leak vulnerability. ","markdown":"The @babel/core package versions prior to 7.18.6 were discovered to contain a memory leak vulnerability. "},"fullDescription":{"text":"The @babel/core package versions prior to 7.18.6 were discovered to contain a memory leak vulnerability. "},"properties":{"security-severity":"9.5","name":"Cxc7705965e0f0","id":"Cxc7705965-e0f0 (sca)","description":"The @babel/core package versions prior to 7.18.6 were discovered to contain a memory leak vulnerability. ","tags":["security","checkmarx","sca"]}},{"id":"Cx8bc4df28-fcf5 (sca)","name":"Cx8bc4df28fcf5","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"In NPM `debug`, the `enable` function accepts a regular expression from user input without escaping it. Arbitrary regular expressions could be injected to cause a Denial of Service attack on the user's browser, otherwise known as a ReDoS (Regular Expression Denial of Service). This is a different issue than CVE-2017-16137.","markdown":"In NPM `debug`, the `enable` function accepts a regular expression from user input without escaping it. Arbitrary regular expressions could be injected to cause a Denial of Service attack on the user's browser, otherwise known as a ReDoS (Regular Expression Denial of Service). This is a different issue than CVE-2017-16137."},"fullDescription":{"text":"In NPM `debug`, the `enable` function accepts a regular expression from user input without escaping it. Arbitrary regular expressions could be injected to cause a Denial of Service attack on the user's browser, otherwise known as a ReDoS (Regular Expression Denial of Service). This is a different issue than CVE-2017-16137."},"properties":{"security-severity":"9.5","name":"Cx8bc4df28fcf5","id":"Cx8bc4df28-fcf5 (sca)","description":"In NPM `debug`, the `enable` function accepts a regular expression from user input without escaping it. Arbitrary regular expressions could be injected to cause a Denial of Service attack on the user's browser, otherwise known as a ReDoS (Regular Expression Denial of Service). This is a different issue than CVE-2017-16137.","tags":["security","checkmarx","sca"]}},{"id":"Cx89601373-08db (sca)","name":"Cx8960137308db","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"NPM `debug` prior to 4.3.0 has a Memory Leak when creating `debug` instances inside a function which can have a significant impact in the Availability. This happens since the function `debug` in the file `src/common.js` does not free up used memory.","markdown":"NPM `debug` prior to 4.3.0 has a Memory Leak when creating `debug` instances inside a function which can have a significant impact in the Availability. This happens since the function `debug` in the file `src/common.js` does not free up used memory."},"fullDescription":{"text":"NPM `debug` prior to 4.3.0 has a Memory Leak when creating `debug` instances inside a function which can have a significant impact in the Availability. This happens since the function `debug` in the file `src/common.js` does not free up used memory."},"properties":{"security-severity":"9.5","name":"Cx8960137308db","id":"Cx89601373-08db (sca)","description":"NPM `debug` prior to 4.3.0 has a Memory Leak when creating `debug` instances inside a function which can have a significant impact in the Availability. This happens since the function `debug` in the file `src/common.js` does not free up used memory.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-38900 (sca)","name":"Cve202238900","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"decode-uri-component is vulnerable to Improper Input Validation resulting in DoS.","markdown":"decode-uri-component is vulnerable to Improper Input Validation resulting in DoS."},"fullDescription":{"text":"decode-uri-component is vulnerable to Improper Input Validation resulting in DoS."},"properties":{"security-severity":"9.5","name":"Cve202238900","id":"CVE-2022-38900 (sca)","description":"decode-uri-component is vulnerable to Improper Input Validation resulting in DoS.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-24434 (sca)","name":"Cve202224434","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"A Denial Of Service vulnerability exists in dicer before 0.3.1. A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes.","markdown":"A Denial Of Service vulnerability exists in dicer before 0.3.1. A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes."},"fullDescription":{"text":"A Denial Of Service vulnerability exists in dicer before 0.3.1. A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes."},"properties":{"security-severity":"9.5","name":"Cve202224434","id":"CVE-2022-24434 (sca)","description":"A Denial Of Service vulnerability exists in dicer before 0.3.1. A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes.","tags":["security","checkmarx","sca"]}},{"id":"Cxe299c2b0-ccc8 (sca)","name":"Cxe299c2b0ccc8","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"Domutils before version 1.6.0 is vulnerable to stack overflow. The function findAll in the file querying.js uses a recursive method to find elements, leading to stack overflow when ran against a huge page. This affects the availability. ","markdown":"Domutils before version 1.6.0 is vulnerable to stack overflow. The function findAll in the file querying.js uses a recursive method to find elements, leading to stack overflow when ran against a huge page. This affects the availability. "},"fullDescription":{"text":"Domutils before version 1.6.0 is vulnerable to stack overflow. The function findAll in the file querying.js uses a recursive method to find elements, leading to stack overflow when ran against a huge page. This affects the availability. "},"properties":{"security-severity":"9.5","name":"Cxe299c2b0ccc8","id":"Cxe299c2b0-ccc8 (sca)","description":"Domutils before version 1.6.0 is vulnerable to stack overflow. The function findAll in the file querying.js uses a recursive method to find elements, leading to stack overflow when ran against a huge page. This affects the availability. ","tags":["security","checkmarx","sca"]}},{"id":"CVE-2019-10775 (sca)","name":"Cve201910775","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"ecstatic before 4.1.4 have a denial of service vulnerability. Successful exploitation could lead to crash of an application.","markdown":"ecstatic before 4.1.4 have a denial of service vulnerability. Successful exploitation could lead to crash of an application."},"fullDescription":{"text":"ecstatic before 4.1.4 have a denial of service vulnerability. Successful exploitation could lead to crash of an application."},"properties":{"security-severity":"9.5","name":"Cve201910775","id":"CVE-2019-10775 (sca)","description":"ecstatic before 4.1.4 have a denial of service vulnerability. Successful exploitation could lead to crash of an application.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2020-15084 (sca)","name":"Cve202015084","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"In express-jwt (NPM package) up and including version 5.3.3, the algorithms entry to be specified in the configuration is not being enforced. When algorithms is not specified in the configuration, with the combination of jwks-rsa, it may lead to authorization bypass. You are affected by this vulnerability if all of the following conditions apply: - You are using express-jwt - You do not have **algorithms** configured in your express-jwt configuration. - You are using libraries such as jwks-rsa as the **secret**. You can fix this by specifying **algorithms** in the express-jwt configuration. See linked GHSA for example. This is also fixed in version 6.0.0.","markdown":"In express-jwt (NPM package) up and including version 5.3.3, the algorithms entry to be specified in the configuration is not being enforced. When algorithms is not specified in the configuration, with the combination of jwks-rsa, it may lead to authorization bypass. You are affected by this vulnerability if all of the following conditions apply: - You are using express-jwt - You do not have **algorithms** configured in your express-jwt configuration. - You are using libraries such as jwks-rsa as the **secret**. You can fix this by specifying **algorithms** in the express-jwt configuration. See linked GHSA for example. This is also fixed in version 6.0.0."},"fullDescription":{"text":"In express-jwt (NPM package) up and including version 5.3.3, the algorithms entry to be specified in the configuration is not being enforced. When algorithms is not specified in the configuration, with the combination of jwks-rsa, it may lead to authorization bypass. You are affected by this vulnerability if all of the following conditions apply: - You are using express-jwt - You do not have **algorithms** configured in your express-jwt configuration. - You are using libraries such as jwks-rsa as the **secret**. You can fix this by specifying **algorithms** in the express-jwt configuration. See linked GHSA for example. This is also fixed in version 6.0.0."},"properties":{"security-severity":"9.5","name":"Cve202015084","id":"CVE-2020-15084 (sca)","description":"In express-jwt (NPM package) up and including version 5.3.3, the algorithms entry to be specified in the configuration is not being enforced. When algorithms is not specified in the configuration, with the combination of jwks-rsa, it may lead to authorization bypass. You are affected by this vulnerability if all of the following conditions apply: - You are using express-jwt - You do not have **algorithms** configured in your express-jwt configuration. - You are using libraries such as jwks-rsa as the **secret**. You can fix this by specifying **algorithms** in the express-jwt configuration. See linked GHSA for example. This is also fixed in version 6.0.0.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2022-36313 (sca)","name":"Cve202236313","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"An issue was discovered in the file-type package versions prior to 16.5.4 and 17.0.x prior to 17.1.3 for \"Node.js\". A malformed MKV file could cause the file type detector to get caught in an infinite loop. This would make the application become unresponsive and could be used to cause a DoS attack.","markdown":"An issue was discovered in the file-type package versions prior to 16.5.4 and 17.0.x prior to 17.1.3 for \"Node.js\". A malformed MKV file could cause the file type detector to get caught in an infinite loop. This would make the application become unresponsive and could be used to cause a DoS attack."},"fullDescription":{"text":"An issue was discovered in the file-type package versions prior to 16.5.4 and 17.0.x prior to 17.1.3 for \"Node.js\". A malformed MKV file could cause the file type detector to get caught in an infinite loop. This would make the application become unresponsive and could be used to cause a DoS attack."},"properties":{"security-severity":"9.5","name":"Cve202236313","id":"CVE-2022-36313 (sca)","description":"An issue was discovered in the file-type package versions prior to 16.5.4 and 17.0.x prior to 17.1.3 for \"Node.js\". A malformed MKV file could cause the file type detector to get caught in an infinite loop. This would make the application become unresponsive and could be used to cause a DoS attack.","tags":["security","checkmarx","sca"]}},{"id":"CVE-2020-28469 (sca)","name":"Cve202028469","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"In glob-parent prior to 5.1.2 the way that the `enclosure` regex in `index.js` is defined could allow an attacker to exploit it, and cause a Denial of Service (ReDoS). This has been fixed in version 5.1.2.","markdown":"In glob-parent prior to 5.1.2 the way that the `enclosure` regex in `index.js` is defined could allow an attacker to exploit it, and cause a Denial of Service (ReDoS). This has been fixed in version 5.1.2."},"fullDescription":{"text":"In glob-parent prior to 5.1.2 the way that the `enclosure` regex in `index.js` is defined could allow an attacker to exploit it, and cause a Denial of Service (ReDoS). This has been fixed in version 5.1.2."},"properties":{"security-severity":"9.5","name":"Cve202028469","id":"CVE-2020-28469 (sca)","description":"In glob-parent prior to 5.1.2 the way that the `enclosure` regex in `index.js` is defined could allow an attacker to exploit it, and cause a Denial of Service (ReDoS). This has been fixed in version 5.1.2.","tags":["security","checkmarx","sca"]}},{"id":"Cxdca8e59f-8bfe (sca)","name":"Cxdca8e59f8bfe","helpUri":"https://checkmarx.com/resource/documents/en/34965-67042-checkmarx-one.html","help":{"text":"In npm inflight there is a memory leak because some resources are not freed correctly after being used. It appears to affect all versions.","markdown":"In npm inflight there is a memory leak because some resources are not freed correctly after being used. It appears to affect all versions."},"fullDescription":{"text":"In npm inflight there is a memory leak because some resources are not freed correctly after being used. It appears to affect all versions."},"properties":{"security-severity":"9.5","name":"Cxdca8e59f8bfe","id":"Cxdca8e59f-8bfe (sca)","description":"In npm inflight there is a memory leak because some resources are not freed correctly after being used. It appears to affect all versions.","tags":["security","checkmarx","sca"]}}]}},"results":[{"ruleId":"Cxda14f253-4e52 (sca)","level":"note","message":{"text":"Npm-bluebird-3.4.7 (Cxda14f253-4e52)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxda14f253-4e52 (sca)","level":"note","message":{"text":"Npm-bluebird-3.7.2 (Cxda14f253-4e52)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxda14f253-4e52 (sca)","level":"note","message":{"text":"Npm-bluebird-3.7.2 (Cxda14f253-4e52)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2018-16487 (sca)","level":"warning","message":{"text":"Npm-lodash-2.4.2 (CVE-2018-16487)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-32822 (sca)","level":"warning","message":{"text":"Npm-hbs-4.2.0 (CVE-2021-32822)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx65603961-769c (sca)","level":"warning","message":{"text":"Npm-debug-3.1.0 (Cx65603961-769c)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx7c42edbf-d5f1 (sca)","level":"warning","message":{"text":"Npm-base64url-0.0.6 (Cx7c42edbf-d5f1)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx5c009a1a-2054 (sca)","level":"warning","message":{"text":"Npm-moment-2.0.0 (Cx5c009a1a-2054)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2016-4055 (sca)","level":"warning","message":{"text":"Npm-moment-2.0.0 (CVE-2016-4055)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx65603961-769c (sca)","level":"warning","message":{"text":"Npm-debug-2.6.9 (Cx65603961-769c)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx65603961-769c (sca)","level":"warning","message":{"text":"Npm-debug-2.6.9 (Cx65603961-769c)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-23566 (sca)","level":"warning","message":{"text":"Npm-nanoid-3.1.20 (CVE-2021-23566)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2018-3721 (sca)","level":"warning","message":{"text":"Npm-lodash-2.4.2 (CVE-2018-3721)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-0122 (sca)","level":"warning","message":{"text":"Npm-node-forge-0.10.0 (CVE-2022-0122)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2019-1010266 (sca)","level":"warning","message":{"text":"Npm-lodash-2.4.2 (CVE-2019-1010266)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-24773 (sca)","level":"warning","message":{"text":"Npm-node-forge-0.10.0 (CVE-2022-24773)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-23771 (sca)","level":"warning","message":{"text":"Npm-notevil-1.3.3 (CVE-2021-23771)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx7d063416-6f02 (sca)","level":"warning","message":{"text":"Npm-sanitize-html-1.4.2 (Cx7d063416-6f02)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx24228ad1-81fd (sca)","level":"warning","message":{"text":"Npm-sanitize-html-1.4.2 (Cx24228ad1-81fd)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx3fe16d6b-d031 (sca)","level":"warning","message":{"text":"Npm-sanitize-html-1.4.2 (Cx3fe16d6b-d031)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2016-1000237 (sca)","level":"warning","message":{"text":"Npm-sanitize-html-1.4.2 (CVE-2016-1000237)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2017-16016 (sca)","level":"warning","message":{"text":"Npm-sanitize-html-1.4.2 (CVE-2017-16016)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-26539 (sca)","level":"warning","message":{"text":"Npm-sanitize-html-1.4.2 (CVE-2021-26539)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-26540 (sca)","level":"warning","message":{"text":"Npm-sanitize-html-1.4.2 (CVE-2021-26540)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2020-28500 (sca)","level":"warning","message":{"text":"Npm-lodash-2.4.2 (CVE-2020-28500)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2020-7639 (sca)","level":"warning","message":{"text":"Npm-eivindfjeldstad-dot-0.0.1 (CVE-2020-7639)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-41940 (sca)","level":"warning","message":{"text":"Npm-engine.io-4.1.2 (CVE-2022-41940)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-4231 (sca)","level":"warning","message":{"text":"Npm-@angular/core-9.0.0 (CVE-2021-4231)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-33987 (sca)","level":"warning","message":{"text":"Npm-got-8.3.2 (CVE-2022-33987)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-23540 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.1.0 (CVE-2022-23540)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2015-9235 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.4.0 (CVE-2015-9235)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxdd801a12-8c33 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.4.0 (Cxdd801a12-8c33)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-23541 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.4.0 (CVE-2022-23541)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-23540 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.4.0 (CVE-2022-23540)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-23539 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.4.0 (CVE-2022-23539)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxffc79d87-98d9 (sca)","level":"error","message":{"text":"Npm-jws-0.2.6 (Cxffc79d87-98d9)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2016-1000223 (sca)","level":"error","message":{"text":"Npm-jws-0.2.6 (CVE-2016-1000223)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2019-10744 (sca)","level":"error","message":{"text":"Npm-lodash-2.4.2 (CVE-2019-10744)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2020-8203 (sca)","level":"error","message":{"text":"Npm-lodash-2.4.2 (CVE-2020-8203)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-23337 (sca)","level":"error","message":{"text":"Npm-lodash-2.4.2 (CVE-2021-23337)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx0b414307-5d4b (sca)","level":"error","message":{"text":"Npm-lodash-2.4.2 (Cx0b414307-5d4b)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-3517 (sca)","level":"error","message":{"text":"Npm-minimatch-3.0.4 (CVE-2022-3517)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-3517 (sca)","level":"error","message":{"text":"Npm-minimatch-3.0.4 (CVE-2022-3517)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-44906 (sca)","level":"error","message":{"text":"Npm-minimist-0.2.2 (CVE-2021-44906)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxb3ca64d2-9cd1 (sca)","level":"error","message":{"text":"Npm-mocha-8.4.0 (Cxb3ca64d2-9cd1)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2017-18214 (sca)","level":"error","message":{"text":"Npm-moment-2.0.0 (CVE-2017-18214)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-24785 (sca)","level":"error","message":{"text":"Npm-moment-2.0.0 (CVE-2022-24785)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx347a3da7-ba99 (sca)","level":"error","message":{"text":"Npm-node-forge-0.10.0 (Cx347a3da7-ba99)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-24771 (sca)","level":"error","message":{"text":"Npm-node-forge-0.10.0 (CVE-2022-24771)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-24772 (sca)","level":"error","message":{"text":"Npm-node-forge-0.10.0 (CVE-2022-24772)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-25887 (sca)","level":"error","message":{"text":"Npm-sanitize-html-1.4.2 (CVE-2022-25887)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-25858 (sca)","level":"error","message":{"text":"Npm-terser-5.5.1 (CVE-2022-25858)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxf6e7f2c1-dc59 (sca)","level":"error","message":{"text":"Npm-yauzl-2.10.0 (Cxf6e7f2c1-dc59)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-3807 (sca)","level":"error","message":{"text":"Npm-ansi-regex-2.1.1 (CVE-2021-3807)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2021-3807 (sca)","level":"error","message":{"text":"Npm-ansi-regex-2.1.1 (CVE-2021-3807)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxc7705965-e0f0 (sca)","level":"error","message":{"text":"Npm-@babel/core-7.12.10 (Cxc7705965-e0f0)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-2.6.9 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-2.6.9 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx89601373-08db (sca)","level":"error","message":{"text":"Npm-debug-2.6.9 (Cx89601373-08db)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx89601373-08db (sca)","level":"error","message":{"text":"Npm-debug-2.6.9 (Cx89601373-08db)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx89601373-08db (sca)","level":"error","message":{"text":"Npm-debug-3.1.0 (Cx89601373-08db)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-3.1.0 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx89601373-08db (sca)","level":"error","message":{"text":"Npm-debug-3.2.7 (Cx89601373-08db)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx89601373-08db (sca)","level":"error","message":{"text":"Npm-debug-3.2.7 (Cx89601373-08db)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-3.2.7 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-3.2.7 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-4.3.1 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-4.3.1 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-4.3.4 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cx8bc4df28-fcf5 (sca)","level":"error","message":{"text":"Npm-debug-4.3.4 (Cx8bc4df28-fcf5)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-38900 (sca)","level":"error","message":{"text":"Npm-decode-uri-component-0.2.2 (CVE-2022-38900)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-38900 (sca)","level":"error","message":{"text":"Npm-decode-uri-component-0.2.2 (CVE-2022-38900)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-24434 (sca)","level":"error","message":{"text":"Npm-dicer-0.2.5 (CVE-2022-24434)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxe299c2b0-ccc8 (sca)","level":"error","message":{"text":"Npm-domutils-1.1.6 (Cxe299c2b0-ccc8)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2019-10775 (sca)","level":"error","message":{"text":"Npm-ecstatic-3.3.2 (CVE-2019-10775)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2020-15084 (sca)","level":"error","message":{"text":"Npm-express-jwt-0.1.3 (CVE-2020-15084)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-36313 (sca)","level":"error","message":{"text":"Npm-file-type-11.1.0 (CVE-2022-36313)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-36313 (sca)","level":"error","message":{"text":"Npm-file-type-3.9.0 (CVE-2022-36313)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-36313 (sca)","level":"error","message":{"text":"Npm-file-type-4.4.0 (CVE-2022-36313)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-36313 (sca)","level":"error","message":{"text":"Npm-file-type-5.2.0 (CVE-2022-36313)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-36313 (sca)","level":"error","message":{"text":"Npm-file-type-6.2.0 (CVE-2022-36313)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2020-28469 (sca)","level":"error","message":{"text":"Npm-glob-parent-3.1.0 (CVE-2020-28469)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxdca8e59f-8bfe (sca)","level":"error","message":{"text":"Npm-inflight-1.0.6 (Cxdca8e59f-8bfe)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxdca8e59f-8bfe (sca)","level":"error","message":{"text":"Npm-inflight-1.0.6 (Cxdca8e59f-8bfe)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"frontend/package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-23539 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.1.0 (CVE-2022-23539)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2022-23541 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.1.0 (CVE-2022-23541)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"Cxdd801a12-8c33 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.1.0 (Cxdd801a12-8c33)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]},{"ruleId":"CVE-2015-9235 (sca)","level":"error","message":{"text":"Npm-jsonwebtoken-0.1.0 (CVE-2015-9235)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"package.json"},"region":{"startLine":1,"startColumn":1,"endColumn":2}}}]}]}]}
